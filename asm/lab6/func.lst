GAS LISTING func.S 			page 1


   1              	#  as -ahlsm=func.lst --32 -gstabs+ -o func.o func.S
   2              	#  ld -melf_i386 -o func-exe-S func.o
   3              	#    	ABI соглашения о вызовах функций
   4              	
   5              	#	Байты из массива Symbols читаются по одному.
   6              	#	Если прочтен код цифры, то он преобразуется 
   7              	#	в 4-байтовое целое, иначе в значение -1.
   8              	#	Результат записывается в элементы массив Numbers.
   9              	
  10              	    .include "my-macro"	# подключение файла с макроопределениями
   1              	
   2              	.macro  Finish
   3              	        movl  $1, %eax
   4              	        xorl  %ebx, %ebx
   5              	        int   $0x80
   6              	.endm
  11              	
  12              	.data # секция данных
  13              	
  14              	Symbols:
  15 0000 39314132 		.asciz	"91A23B456C789"	# массив символьных кодов
  15      33423435 
  15      36433738 
  15      3900
  16              	#				  цифр и "не цифр"
  17              	
  18              	#	для показа исходного состяния  стека 
  19              	#	и мест РОН в нем после pusha в основной программ
  20              	
  21 000e 494E4954 	Ini:	.ascii "INIT"	# стек  
  22 0012 61784620 	EAXF:	.ascii "axF "	# %eax
  23 0016 64694620 	EDIF:	.ascii "diF "	# %edi
  24 001a 62702D34 	EBPm4:	.ascii "bp-4"	# для показа %ebp через %esi
  25              	
  26              	.bss	# секция общей памяти 
  27              	
  28              	.lcomm	Numbers, 40	# массив 4-х байтовых значений цифр
  29              	
  30              	.global _start # точка входа - глобальная метка
  31              	
  32              	.text # секция команд процессора
  33              	
  34              	_start:
  35              	
  36 0000 90       		nop
  37              	
  38              	#	Индикаторы исходных состояний
  39              	
  40              	#	Стека    
  41              	
  42 0001 A10E0000 		movl Ini, %eax	
  42      00
  43 0006 890424   		movl %eax, 0(%esp)
  44              	
  45              	#	Регистров общего назначения перед pusha
  46              		
  47 0009 A1120000 		movl EAXF,  %eax	# первый 
GAS LISTING func.S 			page 2


  47      00
  48 000e 8B3D1600 		movl EDIF,  %edi 	# последний
  48      0000
  49 0014 8B351A00 		movl EBPm4, %esi	# следующий после %ebp 
  49      0000
  50              					# !!! %ebp НЕ ТРОГАТЬ !!! 
  51              			
  52 001a 60       		pusha	# РОН в стек
  53              			
  54 001b 68000000 		pushl $Symbols	# Параметр-2 - адрес массива в стек
  54      00
  55 0020 6A08     		pushl $8 	# Параметр-1 в стек, цикл 0-7 
  56              		
  57 0022 E80D0000 		call Read_Sym   # вызов функции
  57      00
  58              	
  59 0027 83C408   		addl $8,%esp	# очистить стек от параметров Read_Sym
  60              	
  61 002a 61       		popa         	# восстановить РОН
  62              	
  63              		Finish # конец работы, возврат в ОС 
  63 002b B8010000 	>  movl $1,%eax
  63      00
  63 0030 31DB     	>  xorl %ebx,%ebx
  63 0032 CD80     	>  int $0x80
  64              	
  65              	.type	Read_Sym, @function  	# читает Symbols в цикле
  66              	
  67              	#	Имеет два параметра
  68              	
  69              	# P1 - число байтов для чтение из массива 
  70              	# P2 - адрес массива откуда читать
  71              	
  72              	# Прочтенный байт передается в Trans_Sym. 
  73              	# Ее результат возвращается в %eax и передается
  74              	# в элементы массиве Numbers
  75              	
  76              	Read_Sym:
  77              	
  78              	#	Стандартный пролог 
  79              	
  80 0034 55       		pushl %ebp 	 # %ebp  вызывающей -> стек
  81 0035 89E5     		movl  %esp, %ebp # обеспечить адресный доступ к параметрам и 
  82              	#			   локальным переменным в стеке путем базовой 
  83              	#			   адресации через ebp
  84              		                 
  85              	.data # секция данных
  86              	
  87 001e 4C467231 	LVAR1:	.ascii "LFr1" # показ локальной переменной Кадра стека 1
  88              	
  89              	.text # секция команд процессора
  90              	
  91 0037 83EC04   		subl  $4, %esp	 # завести локальную перемен. в Кадре 1
  92 003a A11E0000 	        movl  LVAR1,%eax
  92      00
  93 003f 8945FC   	        movl  %eax,-4(%ebp)        
  94              	        
GAS LISTING func.S 			page 3


  95              	#	Собственно Код  функции
  96              	
  97 0042 29C9     		subl %ecx, %ecx   # иницируем цикла по байтам Symbols
  98              	
  99              	#	Начало цикла 
 100              		
 101              	NextSym:	
 102 0044 8B550C   		movl 12(%ebp), %edx  # адрес P2 - массива в %edx
 103              	
 104              	#    Подготовка вызова функции Trans_Sym
 105              	
 106              	#	Ее параметр - байт передадим через %bl регистра %ebx
 107              	
 108 0047 29DB     		subl %ebx, %ebx	# все нули 
 109              	
 110              	#	- передадим код символа в %bl 
 111              	#	%edx - базовый - взяли из P2,
 112              	#	%ecx - индексный - номер цикла, MM = 1 - один байт
 113              	#	регистровая адресация
 114              	
 115 0049 8A1C0A   		movb (%edx,%ecx,1), %bl     
 116              	
 117              	#	Параметр Trans_Sym готов, можно ее вызывать.
 118              	
 119              	.data # секция данных
 120              	
 121              	#	для показа мест РОН в стеке после pusha в ReadSym
 122              	
 123 0022 61786631 	EAXf1:	.ascii "axf1"	# %eax
 124 0026 64696631 	EDIf1:	.ascii "dif1"	# %edi
 125              	
 126              	.text # секция команд процессора
 127              	
 128              	#	Индикаторы РОН f1 перед pusha
 129              		
 130 004c A1220000 		movl EAXf1,  %eax	# первый 
 130      00
 131 0051 8B3D2600 		movl EDIf1,  %edi 	# последний
 131      0000
 132 0057 8B351A00 		movl EBPm4,  %esi	# следующий после %ebp 
 132      0000
 133              					# !!! %ebp НЕ ТРОГАТЬ !!! 
 134              		
 135 005d 60       		pusha		# сохранить РОН текущей функции Read_Sym	
 136              	
 137 005e 53       		pushl %ebx   	# Параметр Trans_Sym в стек
 138              		
 139 005f E8150000 		call Trans_Sym
 139      00
 140              	
 141 0064 83C404   		addl $4,%esp	# очистить стек от параметров Trans_Sym
 142              	
 143              	#	Опять работает Read_Sym
 144              	
 145              	#	В %eax 4 байтовый результат Trans_Sym 
 146              	
 147              	#	Запись результата в массив Numbers.	
GAS LISTING func.S 			page 4


 148              	
 149              	#	Базовый регистр НЕ ЗАДАН - запятая после лев. скобки
 150              	#	%ecx - индексный регистр, масштаьный множитель - 4
 151              	#	т.к. элементы Numbers - 4-х байтовые слова
 152              	#	регистровая адресация
 153              	
 154 0067 89048D00 		movl	%eax, Numbers(,%ecx,4) 
 154      000000
 155              		
 156 006e 61       		popa   # восстановть регистры Read_Sym		
 157              		
 158 006f 41       		incl %ecx	     # наращиваем счетчик цикла
 159 0070 3B4D08   		cmpl 8(%ebp), %ecx   # счетчик цикла равен первому параметру?
 160              		
 161 0073 75CF     		jne NextSym	     # ДА, на повтор
 162              				     # НЕТ - выходим из цикла
 163              	
 164              	#	Стандартный эпилог функции
 165              	
 166 0075 89EC     		movl %ebp, %esp # восстановить указатель стека
 167 0077 5D       		popl %ebp       # восстановить ebp
 168 0078 C3       		ret		# возврат в вызывающую
 169              		
 170              	# конец Read_Sym
 171              	
 172              	#    Функция преобразования кода символа в числовое зна
 173              	#    c фильтрацией кодов цифр. P1 - байт кода. Возвращается
 174              	#    значение цифры или -1 если код не символа цифры.
 175              		
 176              	.type	Trans_Sym, @function
 177              	
 178              	Trans_Sym:
 179              	
 180              	#	Стандартный пролог фунции
 181              	
 182 0079 55       		pushl %ebp 	 # сохранить в стеке значение, бывшее в вызывающ
 183 007a 89E5     		movl  %esp, %ebp # обеспечить адресный доступ к параметрам и 
 184              	#			   локальным переменным в стеке путем базовой 
 185              	#			   адресации через %ebp
 186              	
 187              	.data # секция данных
 188              	
 189              	LVAR2:
 190 002a 4C467232 		.ascii "LFr2" 	# показ локальной переменной Кадра 2
 191              	
 192              	.text # секция команд процессора
 193              	
 194 007c 83EC04   		subl  $4, %esp	 # завести локальную перемен. в Кадре 1
 195 007f A12A0000 	        movl  LVAR2,%eax
 195      00
 196 0084 8945FC   	        movl  %eax,-4(%ebp)
 197              	
 198              	#	тело функции
 199              	
 200 0087 8B4508   		movl 8(%ebp), %eax  # первый  параметр в eax
 201              		
 202              	#	Фильтр кода символа цифры	
GAS LISTING func.S 			page 5


 203              		
 204 008a 3C39     		cmpb $'9', %al 	 # код больше кода символа '9' ?
 205 008c 7709     		ja Ret_error     # ДА - на возврат -1
 206 008e 3C30     		cmpb $'0', %al	 # код меньше кода сивола '0' ?
 207 0090 7205     		jb Ret_error     # ДА - на возврат -1
 208              		
 209 0092 83E830   		subl $0x30, %eax # получение числового значения
 210              		
 211 0095 EB05     		jmp Ret_norm 	 # на возврат числ. значения цифры
 212              	
 213              	Ret_error:
 214              	
 215 0097 B8FFFFFF 		movl $-1,%eax	 # для возврата если код не символ цифры
 215      FF
 216              	
 217              	Ret_norm:
 218              	
 219              	#	Стандартный эпилог функции
 220              	
 221 009c 89EC     		movl %ebp, %esp # восстановить указатель стека
 222 009e 5D       		popl %ebp       # восстановить ebp
 223 009f C3       		ret		# возврат в вызывающую
 224              	
 225              	#	Конец  Trans_Sym
 226              	
 227              		.end   # последняя строка исходного текста	
GAS LISTING func.S 			page 6


DEFINED SYMBOLS
              func.S:14     .data:00000000 Symbols
              func.S:21     .data:0000000e Ini
              func.S:22     .data:00000012 EAXF
              func.S:23     .data:00000016 EDIF
              func.S:24     .data:0000001a EBPm4
              func.S:28     .bss:00000000 Numbers
              func.S:34     .text:00000000 _start
              func.S:76     .text:00000034 Read_Sym
              func.S:87     .data:0000001e LVAR1
              func.S:101    .text:00000044 NextSym
              func.S:123    .data:00000022 EAXf1
              func.S:124    .data:00000026 EDIf1
              func.S:178    .text:00000079 Trans_Sym
              func.S:189    .data:0000002a LVAR2
              func.S:213    .text:00000097 Ret_error
              func.S:217    .text:0000009c Ret_norm

NO UNDEFINED SYMBOLS
