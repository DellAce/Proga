GAS LISTING task5.S 			page 1


   1              	
   2              	#  as -ahlsm=task5.lst --32 -gstabs+ -o task5.o task5.S
   3              	#   ld -melf_i386 -o task5-exe-S task5.o
   4              	.include "my-macro"
   1              	
   2              	.macro  Finish
   3              	        movl  $1, %eax
   4              	        xorl  %ebx, %ebx
   5              	        int   $0x80
   6              	.endm
   5              	.bss
   6              	    .lcomm buf, 1       # буфер для одного байта
   7              	    .lcomm outbuf, 4    # буфер для вывода числа
   8              	
   9              	.section .data
  10              	A:
  11 0000 01000000 	        .long 1,2,3,4,5,6
  11      02000000 
  11      03000000 
  11      04000000 
  11      05000000 
  12 0018 07000000 	        .long 7,8,9,10,11,12
  12      08000000 
  12      09000000 
  12      0A000000 
  12      0B000000 
  13 0030 0D000000 	        .long 13,14,15,16,17,18
  13      0E000000 
  13      0F000000 
  13      10000000 
  13      11000000 
  14 0048 13000000 	        .long 19,20,21,22,23,24
  14      14000000 
  14      15000000 
  14      16000000 
  14      17000000 
  15 0060 19000000 	        .long 25,26,27,28,29,30
  15      1A000000 
  15      1B000000 
  15      1C000000 
  15      1D000000 
  16 0078 1F000000 	        .long 31,32,33,34,35,36
  16      20000000 
  16      21000000 
  16      22000000 
  16      23000000 
  17              	
  18 0090 00       	k:  .byte 0              # первая цифра
  19 0091 00       	l:  .byte 0              # вторая цифра
  20              	
  21              	.section .text
  22              	.globl _start
  23              	_start:
  24 0000 31F6     	        xor     %esi,%esi
  25              	
  26              	read_loop:
  27 0002 B8030000 	        mov     $3,%eax              # sysread
GAS LISTING task5.S 			page 2


  27      00
  28 0007 31DB     	        xor     %ebx,%ebx            # stdin
  29 0009 B9000000 	        mov     $buf,%ecx
  29      00
  30 000e BA010000 	        mov     $1,%edx
  30      00
  31 0013 CD80     	        int     $0x80
  32 0015 85C0     	        test    %eax,%eax            # EOF / ошибка ждём дальше
  33 0017 7EE9     	        jle     read_loop
  34              	
  35 0019 31C0     	        xor     %eax,%eax
  36 001b A0000000 	        movb    buf,%al              # al считанный символ
  36      00
  37 0020 3C30     	        cmp     $'0',%al             # меньше '0' ? = пропуск
  38 0022 72DE     	        jb      read_loop
  39 0024 3C35     	        cmp     $'5',%al             # больше '5' ? = пропуск
  40 0026 77DA     	        ja      read_loop
  41 0028 2C30     	        sub     $'0',%al             # al = 0‑5
  42              	
  43 002a 83FE00   	        cmp     $0,%esi              # это первая цифра?
  44 002d 740D     	        je      store_k         # да, сохраняем её
  45 002f A2910000 	        movb    %al,l            # вторая -> l
  45      00
  46 0034 46       	        inc     %esi
  47 0035 83FE02   	        cmp     $2,%esi
  48 0038 7CC8     	        jl      read_loop            # ещё нет двух - заново
  49 003a EB08     	        jmp     compute
  50              	store_k:
  51 003c A2900000 	        movb    %al,k            # первая -> k
  51      00
  52 0041 46       	        inc     %esi
  53 0042 EBBE     	        jmp     read_loop
  54              	
  55              	compute:
  56 0044 31F6     	        xor     %esi,%esi            # i = 0
  57              	
  58              	calc_loop:
  59 0046 31DB     	        xor     %ebx,%ebx
  60 0048 8A1D9000 	        movb    k,%bl           # k в EBX
  60      0000
  61 004e 31D2     	        xor     %edx,%edx
  62 0050 8A159100 	        movb    l,%dl        # l в EDX
  62      0000
  63              	
  64              	        # A[k][i]
  65 0056 89D8     	        mov     %ebx,%eax            # k
  66 0058 6BC018   	        imul    $24,%eax             # k * 24
  67 005b 89F1     	        mov     %esi,%ecx            # i
  68 005d C1E102   	        shl     $2,%ecx              # i * 4
  69 0060 01C8     	        add     %ecx,%eax
  70 0062 05000000 	        add     $A,%eax
  70      00
  71 0067 8B00     	        mov     (%eax),%eax          # EAX = A[k][i]
  72              	
  73              	        # A[i][l]
  74 0069 89F1     	        mov     %esi,%ecx
  75 006b 6BC918   	        imul    $24,%ecx             # i * 24
GAS LISTING task5.S 			page 3


  76 006e 89D7     	        mov     %edx,%edi            # l
  77 0070 C1E702   	        shl     $2,%edi              # l * 4
  78 0073 01F9     	        add     %edi,%ecx
  79 0075 81C10000 	        add     $A,%ecx
  79      0000
  80 007b 8B09     	        mov     (%ecx),%ecx          # ECX = A[i][l]
  81              	
  82 007d 01C8     	        add     %ecx,%eax            # сумма
  83 007f E80F0000 	        call    print_int            # печать
  83      00
  84              	
  85 0084 46       	        inc     %esi                 # i++
  86 0085 83FE06   	        cmp     $6,%esi
  87 0088 7CBC     	        jl      calc_loop
  88              	
  89              	        Finish
  89 008a B8010000 	>  movl $1,%eax
  89      00
  89 008f 31DB     	>  xorl %ebx,%ebx
  89 0091 CD80     	>  int $0x80
  90              	
  91              	print_int:
  92 0093 B90A0000 	        mov     $10,%ecx             # делитель
  92      00
  93 0098 31D2     	        xor     %edx,%edx
  94 009a F7F1     	        div     %ecx                 # EAX = десятки, EDX = единицы
  95              	
  96 009c BF040000 	        mov     $outbuf,%edi
  96      00
  97 00a1 83F800   	        cmp     $0,%eax
  98 00a4 7510     	        jne     two_digits
  99 00a6 80C230   	        add     $'0',%dl             # одна цифра
 100 00a9 8817     	        mov     %dl,(%edi)
 101 00ab C647010A 	        movb    $'\n',1(%edi)
 102 00af BA020000 	        mov     $2,%edx              # len = 2
 102      00
 103 00b4 EB13     	        jmp     write_out
 104              	
 105              	two_digits: # подготовка двух цифр
 106 00b6 0430     	        add     $'0',%al             # десятки
 107 00b8 80C230   	        add     $'0',%dl             # единицы
 108 00bb 8807     	        mov     %al,(%edi)
 109 00bd 885701   	        mov     %dl,1(%edi)
 110 00c0 C647020A 	        movb    $'\n',2(%edi)
 111 00c4 BA030000 	        mov     $3,%edx              # len = 3
 111      00
 112              	
 113              	write_out:
 114 00c9 B8040000 	        mov     $4,%eax              # sys_write
 114      00
 115 00ce BB010000 	        mov     $1,%ebx              # fd = 1 (stdout)
 115      00
 116 00d3 B9040000 	        mov     $outbuf,%ecx
 116      00
 117 00d8 CD80     	        int     $0x80
 118 00da C3       	        ret
GAS LISTING task5.S 			page 4


DEFINED SYMBOLS
                             .bss:00000000 buf
             task5.S:7      .bss:00000004 outbuf
             task5.S:10     .data:00000000 A
             task5.S:18     .data:00000090 k
             task5.S:19     .data:00000091 l
             task5.S:23     .text:00000000 _start
             task5.S:26     .text:00000002 read_loop
             task5.S:50     .text:0000003c store_k
             task5.S:55     .text:00000044 compute
             task5.S:58     .text:00000046 calc_loop
             task5.S:91     .text:00000093 print_int
             task5.S:105    .text:000000b6 two_digits
             task5.S:113    .text:000000c9 write_out

NO UNDEFINED SYMBOLS
