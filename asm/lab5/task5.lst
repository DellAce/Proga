GAS LISTING task5.S 			page 1


   1              	/*
   2              	 *   as -ahlsm=task5.lst --32 -gstabs+ -o task5.o task5.S
   3              	 *   ld -melf_i386 -o task5-exe-S task5.o
   4              	 */
   5              	.include "my-macro"
   1              	
   2              	.macro  Finish
   3              	        movl  $1, %eax
   4              	        xorl  %ebx, %ebx
   5              	        int   $0x80
   6              	.endm
   6              	.bss
   7              	    .lcomm buf, 1       # буфер для одного байта (чтение)
   8              	    .lcomm outbuf, 4    # буфер для вывода числа (например, "72\n")
   9              	
  10              	.section .data
  11              	A:
  12 0000 01000000 	        .long 1,2,3,4,5,6
  12      02000000 
  12      03000000 
  12      04000000 
  12      05000000 
  13 0018 07000000 	        .long 7,8,9,10,11,12
  13      08000000 
  13      09000000 
  13      0A000000 
  13      0B000000 
  14 0030 0D000000 	        .long 13,14,15,16,17,18
  14      0E000000 
  14      0F000000 
  14      10000000 
  14      11000000 
  15 0048 13000000 	        .long 19,20,21,22,23,24
  15      14000000 
  15      15000000 
  15      16000000 
  15      17000000 
  16 0060 19000000 	        .long 25,26,27,28,29,30
  16      1A000000 
  16      1B000000 
  16      1C000000 
  16      1D000000 
  17 0078 1F000000 	        .long 31,32,33,34,35,36
  17      20000000 
  17      21000000 
  17      22000000 
  17      23000000 
  18              	
  19 0090 00       	k:  .byte 0              # первая цифра
  20 0091 00       	l:  .byte 0              # вторая цифра
  21              	
  22              	        .section .text
  23              	        .globl _start
  24              	_start:
  25 0000 31F6     	        xor     %esi,%esi
  26              	
  27              	read_loop:
GAS LISTING task5.S 			page 2


  28 0002 B8030000 	        mov     $3,%eax              # sys_read
  28      00
  29 0007 31DB     	        xor     %ebx,%ebx            # stdin
  30 0009 B9000000 	        mov     $buf,%ecx
  30      00
  31 000e BA010000 	        mov     $1,%edx
  31      00
  32 0013 CD80     	        int     $0x80
  33 0015 85C0     	        test    %eax,%eax            # EOF / ошибка ждём дальше
  34 0017 7EE9     	        jle     read_loop
  35              	
  36 0019 31C0     	        xor     %eax,%eax
  37 001b A0000000 	        movb    buf,%al              # al считанный символ
  37      00
  38 0020 3C30     	        cmp     $'0',%al             # меньше '0' ? = пропуск
  39 0022 72DE     	        jb      read_loop
  40 0024 3C35     	        cmp     $'5',%al             # больше '5' ? = пропуск
  41 0026 77DA     	        ja      read_loop
  42 0028 2C30     	        sub     $'0',%al             # al = 0‑5
  43              	
  44 002a 83FE00   	        cmp     $0,%esi              # это первая цифра?
  45 002d 740D     	        je      store_k         # да, сохраняем её
  46 002f A2910000 	        movb    %al,l            # вторая → l
  46      00
  47 0034 46       	        inc     %esi
  48 0035 83FE02   	        cmp     $2,%esi
  49 0038 7CC8     	        jl      read_loop            # ещё нет двух – заново
  50 003a EB08     	        jmp     compute
  51              	store_k:
  52 003c A2900000 	        movb    %al,k            # первая → k
  52      00
  53 0041 46       	        inc     %esi
  54 0042 EBBE     	        jmp     read_loop
  55              	
  56              	# === Вычисление b(i) и вывод ===
  57              	compute:
  58 0044 31F6     	        xor     %esi,%esi            # i = 0
  59              	
  60              	calc_loop:
  61 0046 31DB     	        xor     %ebx,%ebx
  62 0048 8A1D9000 	        movb    k,%bl           # k в EBX
  62      0000
  63 004e 31D2     	        xor     %edx,%edx
  64 0050 8A159100 	        movb    l,%dl        # l в EDX
  64      0000
  65              	
  66              	        # A[k][i]
  67 0056 89D8     	        mov     %ebx,%eax            # k
  68 0058 6BC018   	        imul    $24,%eax             # k * 24
  69 005b 89F1     	        mov     %esi,%ecx            # i
  70 005d C1E102   	        shl     $2,%ecx              # i * 4
  71 0060 01C8     	        add     %ecx,%eax
  72 0062 05000000 	        add     $A,%eax
  72      00
  73 0067 8B00     	        mov     (%eax),%eax          # EAX = A[k][i]
  74              	
  75              	        # A[i][l]
GAS LISTING task5.S 			page 3


  76 0069 89F1     	        mov     %esi,%ecx
  77 006b 6BC918   	        imul    $24,%ecx             # i * 24
  78 006e 89D7     	        mov     %edx,%edi            # l
  79 0070 C1E702   	        shl     $2,%edi              # l * 4
  80 0073 01F9     	        add     %edi,%ecx
  81 0075 81C10000 	        add     $A,%ecx
  81      0000
  82 007b 8B09     	        mov     (%ecx),%ecx          # ECX = A[i][l]
  83              	
  84 007d 01C8     	        add     %ecx,%eax            # сумма
  85 007f E80F0000 	        call    print_int            # печать
  85      00
  86              	
  87 0084 46       	        inc     %esi                 # i++
  88 0085 83FE06   	        cmp     $6,%esi
  89 0088 7CBC     	        jl      calc_loop
  90              	
  91              	        Finish
  91 008a B8010000 	>  movl $1,%eax
  91      00
  91 008f 31DB     	>  xorl %ebx,%ebx
  91 0091 CD80     	>  int $0x80
  92              	
  93              	print_int:
  94 0093 B90A0000 	        mov     $10,%ecx             # делитель
  94      00
  95 0098 31D2     	        xor     %edx,%edx
  96 009a F7F1     	        div     %ecx                 # EAX = десятки, EDX = единицы
  97              	
  98 009c BF040000 	        mov     $outbuf,%edi
  98      00
  99 00a1 83F800   	        cmp     $0,%eax
 100 00a4 7510     	        jne     two_digits
 101 00a6 80C230   	        add     $'0',%dl             # одна цифра
 102 00a9 8817     	        mov     %dl,(%edi)
 103 00ab C647010A 	        movb    $'\n',1(%edi)
 104 00af BA020000 	        mov     $2,%edx              # len = 2
 104      00
 105 00b4 EB13     	        jmp     write_out
 106              	
 107              	two_digits:
 108 00b6 0430     	        add     $'0',%al             # десятки
 109 00b8 80C230   	        add     $'0',%dl             # единицы
 110 00bb 8807     	        mov     %al,(%edi)
 111 00bd 885701   	        mov     %dl,1(%edi)
 112 00c0 C647020A 	        movb    $'\n',2(%edi)
 113 00c4 BA030000 	        mov     $3,%edx              # len = 3
 113      00
 114              	
 115              	write_out:
 116 00c9 B8040000 	        mov     $4,%eax              # sys_write
 116      00
 117 00ce BB010000 	        mov     $1,%ebx              # fd = 1 (stdout)
 117      00
 118 00d3 B9040000 	        mov     $outbuf,%ecx
 118      00
 119 00d8 CD80     	        int     $0x80
GAS LISTING task5.S 			page 4


 120 00da C3       	        ret
GAS LISTING task5.S 			page 5


DEFINED SYMBOLS
                             .bss:00000000 buf
             task5.S:8      .bss:00000004 outbuf
             task5.S:11     .data:00000000 A
             task5.S:19     .data:00000090 k
             task5.S:20     .data:00000091 l
             task5.S:24     .text:00000000 _start
             task5.S:27     .text:00000002 read_loop
             task5.S:51     .text:0000003c store_k
             task5.S:57     .text:00000044 compute
             task5.S:60     .text:00000046 calc_loop
             task5.S:93     .text:00000093 print_int
             task5.S:107    .text:000000b6 two_digits
             task5.S:115    .text:000000c9 write_out

NO UNDEFINED SYMBOLS
