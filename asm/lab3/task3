GAS LISTING task3.S 			page 1


   1              	/*
   2              	 * Программа ввода кодов цифровых символов в буфер в ОП
   3              	 */
   4              	
   5              	.include "my-macro"
   1              	/*
   2              	 * Макроопределение завершения работы.
   3              	 * Аргументы:
   4              	 *     - код завершения программы
   5              	 *
   6              	 * После выполнения макровызова изменяются регистры: %e
   7              	 * См. также 'man 2 exit'
   8              	*/
   9              	.macro Exit ret_val
  10              	    movl $1, %eax         # номер сист. вызова exit
  11              	    movl \ret_val, %ebx     # код выхода
  12              	    int $0x80         # выполнить системный вызов
  13              	.endm
  14              	
  15              	
  16              	/*
  17              	 * Макроопределение для считывания одного байта кода с
  18              	 * стандартного ввода
  19              	 * Аргументы:
  20              	 *     - адрес буфера для считывания байта
  21              	 * Результат:
  22              	 *    - в %eax количество считанных байтов
  23              	 *    - по адресу buf_addr - считанный байт
  24              	 *
  25              	 * После выполнения макровызова изменяются регистры: %e
  26              	 * См. также 'man 2 read'
  27              	*/
  28              	.macro Getchar buf_addr
  29              	    movl $3, %eax        # номер сист. вызова read
  30              	    movl $0, %ebx        # параметр 1: дескриптор стандартного вво
  31              	    movl \buf_addr, %ecx    # параметр 2: адрес буфера (он же - фактич
  32              	                     # параметр макровызова)
  33              	    movl $1, %edx        # параметр 3: количество байтов для чтени�
  34              	    int $0x80        # выполнить системный вызов
  35              	.endm
  36              	
  37              	/*
  38              	 * Макроопределение для  вывода строки в файл стандарт�
  39              	 * Аргументы:
  40              	 *     - Строка для вывода.
  41              	 *
  42              	 * Приметр макровызова:
  43              	 *    Puts "Текст выводимой строки"
  44              	 *
  45              	 * Результат:
  46              	 *    - выводит в стандартный вывод символы заданной стр�
  47              	 *      и вслед за ними символ перевода строки \n
  48              	 *
  49              	 * После выполнения макровызова изменяются регистры: %e
  50              	 * См. также 'man puts', 'man 2 write'
  51              	*/
  52              	.macro Puts string
GAS LISTING task3.S 			page 2


  53              	.data
  54              	    str\@:     .ascii "\string\n"  # формирование фактической строки �
  55              	
  56              	    strlen\@ =     . - str\@           # получение значения длины строк�
  57              	
  58              	.text
  59              	    movl $4, %eax        # номер сист. вызова write
  60              	    movl $1, %ebx        # параметр 1: дескриптор стандартного выв
  61              	    movl $str\@, %ecx    # параметр 2: адрес памяти с выводимыми си
  62              	    movl $strlen\@, %edx     # параметр 3: количество байтов для выв�
  63              	    int $0x80        # выполнить системный вызов
  64              	.endm
   6              	
   7              	.bss
   8              	    .lcomm buf, 100 # 100 байтовый буфер для кодов прочитанных си
   9              	    .lcomm c, 1    # однобайтовый буфер для чтения байта из фай
  10              	
  11              	.text
  12              	.global _start
  13              	
  14              	_start:
  15:task3.S       ****     sub    %esi, %esi     # указатель адреса байта в буфере buf (инд�
  16              	
  17              	show_prompt:
  18:task3.S       ****     Puts "Вводите цифру, друг мой!"     # макровызов вывода ст
  18              	> .data
  18 ???? D092D0B2 	>  str0:.ascii "Вводите цифру, друг мой!\n"
  18      D0BED0B4 
  18      D0B8D182 
  18      D0B520D1 
  18      86D0B8D1 
  18              	> 
  18              	>  strlen0 =. - str0
  18              	> 
  18              	> .text
  18 ???? B8040000 	>  movl $4,%eax
  18      00
  18 ???? BB010000 	>  movl $1,%ebx
  18      00
  18 ???? B9000000 	>  movl $str0,%ecx
  18      00
  18 ???? BA2C0000 	>  movl $strlen0,%edx
  18      00
  18 ???? CD80     	>  int $0x80
  19              	                    # файл stdout (подсказка ввода)
  20              	
  21              	kbd_input:
  22:task3.S       ****     Getchar $c          # макровызов ввода байта из stdin в
  22 ???? B8030000 	>  movl $3,%eax
  22      00
  22 ???? BB000000 	>  movl $0,%ebx
  22      00
  22 ???? B9640000 	>  movl $c,%ecx
  22      00
  22              	>  
  22 ???? BA010000 	>  movl $1,%edx
  22      00
GAS LISTING task3.S 			page 3


  22 ???? CD80     	>  int $0x80
  23              	            # промежуточный буфер c
  24:task3.S       ****     movb c, %al       # передать код символа из c в al
  25:task3.S       ****     cmpl $0, %eax     # наступило событие EOF (конец файла stdin) ?
  26:task3.S       ****     je stop        # Да - на завершение программы
  27              	
  28:task3.S       ****     cmpb $'\n', c     # это символ перевода строки ?
  29:task3.S       ****     je kbd_input     # ДА - на ввод следующего символа
  30:task3.S       ****     cmpb $'9', c      # код больше кода символа '9' ?
  31:task3.S       ****     ja print_err_msg    # ДА - на вывод сообщения об ошибке
  32:task3.S       ****     cmpb $'0', c    # код меньше кода символа '0' ?
  33:task3.S       ****     jb print_err_msg    # ДА - на вывод сообщения об ошибке
  34              	
  35:task3.S       ****     movb c, %al         # передать код символа цифры из c в al
  36:task3.S       ****     movb %al, buf(%esi) # передать код символа цифры из al в байт
  37              	            # буфера по адресу &buf + esi
  38:task3.S       ****     incl %esi        # указать на следующий байт буфера для
  39              	            # следующего кода
  40:task3.S       ****     cmpl $100, %esi     # проверка: достигнут ли предел буфера?
  41:task3.S       ****     je buffer_full      # если да, перейти к завершению с сообщени
  42              	
  43:task3.S       ****     Puts "Цифра! Хорошо." # сообщения об успехе вводе
  43              	> .data
  43 ???? D0A6D0B8 	>  str2:.ascii "Цифра! Хорошо.\n"
  43      D184D180 
  43      D0B02120 
  43      D0A5D0BE 
  43      D180D0BE 
  43              	> 
  43              	>  strlen2 =. - str2
  43              	> 
  43              	> .text
  43 ???? B8040000 	>  movl $4,%eax
  43      00
  43 ???? BB010000 	>  movl $1,%ebx
  43      00
  43 ???? B92C0000 	>  movl $str2,%ecx
  43      00
  43 ???? BA1A0000 	>  movl $strlen2,%edx
  43      00
  43 ???? CD80     	>  int $0x80
  44              	
  45:task3.S       ****     jmp show_prompt    # на ввод следующего символа
  46              	buffer_full:
  47:task3.S       ****     Puts "Буфер заполнен." # сообщение о заполнении буфера
  47              	> .data
  47 ???? D091D183 	>  str3:.ascii "Буфер заполнен.\n"
  47      D184D0B5 
  47      D18020D0 
  47      B7D0B0D0 
  47      BFD0BED0 
  47              	> 
  47              	>  strlen3 =. - str3
  47              	> 
  47              	> .text
  47 ???? B8040000 	>  movl $4,%eax
  47      00
GAS LISTING task3.S 			page 4


  47 ???? BB010000 	>  movl $1,%ebx
  47      00
  47 ???? B9460000 	>  movl $str3,%ecx
  47      00
  47 ???? BA1D0000 	>  movl $strlen3,%edx
  47      00
  47 ???? CD80     	>  int $0x80
  48:task3.S       ****     jmp stop     # на завершение программы
  49              	
  50              	print_err_msg:
  51:task3.S       ****     Puts "Не цифровая клавиша. Повторите ввод"    # вывод соо
  51              	> .data
  51 ???? D09DD0B5 	>  str4:.ascii "Не цифровая клавиша. Повторите ввод\n"
  51      20D186D0 
  51      B8D184D1 
  51      80D0BED0 
  51      B2D0B0D1 
  51              	> 
  51              	>  strlen4 =. - str4
  51              	> 
  51 ???? 000000   	> .text
  51 ???? B8040000 	>  movl $4,%eax
  51      00
  51 ???? BB010000 	>  movl $1,%ebx
  51      00
  51 ???? B9630000 	>  movl $str4,%ecx
  51      00
  51 ???? BA420000 	>  movl $strlen4,%edx
  51      00
  51 ???? CD80     	>  int $0x80
  52:task3.S       ****     jmp show_prompt     # на ввод следующего символа
  53              	
  54              	stop:
  55:task3.S       ****     Exit $0
  55 ???? B8010000 	>  movl $1,%eax
  55      00
  55 ???? BB000000 	>  movl $0,%ebx
  55      00
  55 ???? CD80     	>  int $0x80
  56              	
  57 ???? 90       	.end
GAS LISTING task3.S 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 fake
             task3.S:8      .bss:00000000 buf
             task3.S:8      .bss:00000064 c
             task3.S:14     .text:00000000 _start
             task3.S:17     .text:00000002 show_prompt
             task3.S:18     .data:00000000 str0
             task3.S:18     *ABS*:0000002c strlen0
             task3.S:21     .text:00000018 kbd_input
             task3.S:54     .text:000000af stop
             task3.S:50     .text:00000094 print_err_msg
             task3.S:46     .text:0000007c buffer_full
             task3.S:43     .data:0000002c str2
             task3.S:43     *ABS*:0000001a strlen2
             task3.S:47     .data:00000046 str3
             task3.S:47     *ABS*:0000001d strlen3
             task3.S:51     .data:00000063 str4
             task3.S:51     *ABS*:00000042 strlen4

NO UNDEFINED SYMBOLS
